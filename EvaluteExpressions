
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct ListStack *StackOperator;
struct ListStack{	//运算符栈 
	char data;
	StackOperator next;
};
typedef struct Liststack *StackNumber;
struct Liststack{	//运算数栈 
	int data;
	StackNumber next;
};

int IsEmptyOperator(StackOperator K)//判断运算符栈是否为空 
{
	if(K->next == NULL)
		return 1;
	else 
		return 0;
}
int IsEmptyNumber(StackNumber K)//判断运算数栈是否为空 
{
	if(K->next == NULL)
		return 1;
	else 
		return 0;
}

StackOperator InitStack()//初始化运算符栈 
{
	StackOperator S;
	S = (StackOperator)malloc(sizeof(struct ListStack));
	S->next = NULL;
	return S;
}
StackNumber Initstack()//初始化运算数栈 
{
	StackNumber S;
	S = (StackNumber)malloc(sizeof(struct Liststack));
	S->next = NULL;
	return S;
}
void PushOperator(StackOperator K,char X)//运算符进栈 
{
	StackOperator tempS;
	tempS=(StackOperator)malloc(sizeof(struct ListStack));
	tempS->data = X;
	tempS->next = K->next;
	K->next = tempS;
}
void PushNumber(StackNumber K,int X)//运算数进栈
{
	StackNumber tempS;
	tempS=(StackNumber)malloc(sizeof(struct Liststack));
	tempS->data = X;
	tempS->next = K->next;
	K->next = tempS;
}
char PopOperator(StackOperator K)//运算符出栈 
{
	if(IsEmptyOperator(K))
	{
		printf("堆栈为空\n");
		return 'N';
	}
	else
	{
		char top;
		StackOperator tempS;
		tempS = K->next;
		top = tempS->data;
		K->next = tempS->next;
		free(tempS);
		return top;
	}
}
int PopNumber(StackNumber K)//运算数出栈 
{
	if(IsEmptyNumber(K))
	{
		printf("堆栈为空\n");
		return 0;
	}
	else
	{
		int top;
		StackNumber tempS;
		tempS = K->next;
		top = tempS->data;
		K->next = tempS->next;
		free(tempS);
		return top;
	}
}

void PrintStackOperator(StackOperator K)//输出运算符栈 
{
	StackOperator tempS;
	tempS = K;
	if(IsEmptyOperator(tempS))
	{
		printf("NULL");
	}
	else
	{
		while(!IsEmptyOperator(tempS))
		{
			tempS=tempS->next;
			printf("%c",tempS->data);
		}
	}
}
void PrintStackNumber(StackNumber K)//输出运算数栈 
{
	StackNumber tempS;
	tempS = K;
	if(IsEmptyNumber(tempS))
	{
		printf("NULL");
	}
	else
	{
		while(!IsEmptyNumber(tempS))
		{
			tempS=tempS->next;
			printf("%d",tempS->data);
		}
	}
}

char Operator1[8]={'+','-','*','/','(',')','#'};
char Operator2[8]={'+','-','*','/','(',')','#'};
char Relation[8][8];

void SetOperator()//设置运算优先关系
{
	int i,j;
	for(i=0;i<7;i++)
	{
		for(j=0;j<7;j++)
		{
			if(i==0 || i==1)
			{
				if(j==0 || j==1 || j==5 || j==6)
					Relation[i][j]='>';
				else Relation[i][j]='<';
			}
			else if(i==2 || i==3)
			{
				if(j==4) Relation[i][j]='<';
				else Relation[i][j]='>';
			}
			else if(i==4)
			{
				if(j==5) Relation[i][j]='=';
				else if(j==6) Relation[i][j]='0';
				else Relation[i][j]='<';
			}
			else if(i==5)
			{
				if(j==5) Relation[i][j]='>';
				else if(j==4) Relation[i][j]='0';
				else Relation[i][j]='>';
			}
			else if(i==6)
			{
				if(j==5)	Relation[i][j]='0';
				else if(j==6) Relation[i][j]='=';
				else Relation[i][j]='<';
			}
		}
	}	
}

char Analyze(char a,char b)//判断优先级 
{
	int i,j;
	for(i=0;i<7;i++)
	{
		if(a==Operator1[i]) break;
	}
	for(j=0;j<6;j++)
	{
		if(b==Operator2[j]) break;
	}
	return Relation[i][j];
}

int Compute(int length,char input[100])//表达式求值 
{
	StackOperator Operator;
	StackNumber Number;
	Operator = InitStack();
	Number = Initstack();
	int num,numTemp,NO1,NO2; 
	PushOperator(Operator , '#');
	int i;
	for(i=0;i<length;i++)
	{
		if(input[i]>='0' && input[i]<='9')
		{
			num=input[i]-'0';
			PushNumber(Number,num);
			while(input[i+1]>='0' && input[i+1]<='9')
			{
				i++;
				numTemp=PopNumber(Number);
				num=input[i]-'0'+numTemp*10;
				PushNumber(Number,num);
			}
		}
		else if(input[i]=='+' || input[i]=='-' || input[i]=='*' || input[i]=='/' || input[i]=='(' || input[i]==')' || input[i]=='#')
		{
			char character1=PopOperator(Operator);
			char character2=input[i];
			char outcome=Analyze(character1,character2);
			switch(outcome){
				case('>'):
					 NO2=PopNumber(Number);
					 NO1=PopNumber(Number);
					if(character1=='+')
						num=NO1+NO2;
					else if(character1=='-')
						num=NO1-NO2;
					else if(character1=='*')
						num=NO1*NO2;
					else
					{
				     	if(NO2!=0) 
						num=NO1/NO2;
						else
						{
							printf("表达式无意义\n");
							return 0; 
						}
					} 
					PushNumber(Number,num);
					char characterTemp;
					characterTemp=PopOperator(Operator);
					if(characterTemp=='(' && character2==')') 
						continue;
					else
					{
						PushOperator(Operator , characterTemp);
						i--; 
					}
					
					break;
				case('<'):
					PushOperator(Operator , character1);
					PushOperator(Operator , character2);
					break;
				case('='):
					break;
			}
			
		}
	}

	PrintStackNumber(Number);
	printf("\n");
}

int main()
{
	SetOperator();
	char Input[100];
	printf("请输入表达式，以“#”结尾： "); 
	int Length;
	gets(Input);
	Length = strlen(Input);
	Compute(Length,Input);
} 
